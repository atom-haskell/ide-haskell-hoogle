"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HoogleDocView = void 0;
const atom_1 = require("atom");
const etch = require("etch");
const util_1 = require("./util");
class HoogleDocView {
    constructor(props = {}) {
        this.props = props;
        this.disposables = new atom_1.CompositeDisposable();
        this.style = {};
        this.parsedDoc = '';
        this.openWebDoc = () => {
            this.props.symbol && util_1.openWeb(this.props.symbol, false);
        };
        this.updateDoc(props.symbol && props.symbol.doc);
        this.disposables.add(atom.config.observe('editor.fontSize', (fontSize) => {
            if (fontSize) {
                this.style.fontSize = `${fontSize}px`;
            }
        }), atom.config.observe('editor.fontFamily', (fontFamily) => {
            if (fontFamily) {
                this.style.fontFamily = fontFamily;
            }
        }));
        etch.initialize(this);
    }
    render() {
        const hrefBtns = [];
        if (this.props.symbol && this.props.symbol.href) {
            hrefBtns.push(etch.dom("a", { class: "btn btn-default", on: { click: this.openWebDoc } }, "Open web documentation"), etch.dom("a", { class: "btn btn-default", href: this.props.symbol.href }, "Open web documentation in browser"));
        }
        return (etch.dom("div", { class: "ide-haskell-hoogle" },
            etch.dom("div", { style: this.style, innerHTML: util_1.hl((this.props.symbol && this.props.symbol.signature) || '') }),
            etch.dom("div", null, hrefBtns),
            etch.dom("div", { class: "ide-haskell-hoogle-output editor editor-colors native-key-bindings", style: this.style, tabIndex: "-1", innerHTML: this.parsedDoc })));
    }
    async update(props) {
        if ((this.props.symbol && this.props.symbol.doc) !==
            (props.symbol && props.symbol.doc)) {
            this.updateDoc(props.symbol && props.symbol.doc);
        }
        this.props = props;
        return etch.update(this);
    }
    getURI() {
        return 'ide-haskell://hoogle/doc/';
    }
    getTitle() {
        return 'Hoogle doc';
    }
    destroy() {
        etch.destroy(this);
        this.disposables.dispose();
    }
    serialize() {
        return Object.assign(Object.assign({}, this.props), { deserializer: 'HoogleDocView' });
    }
    updateDoc(doc) {
        if (!doc) {
            this.parsedDoc = 'No documentation';
            return;
        }
        const div = document.createElement('div');
        div.innerHTML = doc;
        div.querySelectorAll('pre').forEach((el) => {
            el.innerHTML = util_1.hl(el.innerText);
        });
        div.querySelectorAll('a').forEach((el) => {
            el.outerHTML = util_1.hl(el.innerText.trim());
        });
        this.parsedDoc = div.innerHTML;
    }
}
exports.HoogleDocView = HoogleDocView;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9vZ2xlLWRvYy12aWV3LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2hvb2dsZS1kb2Mtdmlldy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsK0JBQTBDO0FBQzFDLDZCQUE0QjtBQUM1QixpQ0FBb0M7QUFRcEMsTUFBYSxhQUFhO0lBT3hCLFlBQW1CLFFBQWdCLEVBQUU7UUFBbEIsVUFBSyxHQUFMLEtBQUssQ0FBYTtRQU45QixnQkFBVyxHQUFHLElBQUksMEJBQW1CLEVBQUUsQ0FBQTtRQUN0QyxVQUFLLEdBR1QsRUFBRSxDQUFBO1FBQ0UsY0FBUyxHQUFXLEVBQUUsQ0FBQTtRQWtHdEIsZUFBVSxHQUFHLEdBQUcsRUFBRTtZQUN4QixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sSUFBSSxjQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUE7UUFDeEQsQ0FBQyxDQUFBO1FBbEdDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLE1BQU0sSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ2hELElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUNsQixJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLFFBQWdCLEVBQUUsRUFBRTtZQUMxRCxJQUFJLFFBQVEsRUFBRTtnQkFDWixJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxHQUFHLFFBQVEsSUFBSSxDQUFBO2FBQ3RDO1FBQ0gsQ0FBQyxDQUFDLEVBQ0YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxVQUFrQixFQUFFLEVBQUU7WUFDOUQsSUFBSSxVQUFVLEVBQUU7Z0JBQ2QsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFBO2FBQ25DO1FBQ0gsQ0FBQyxDQUFDLENBQ0gsQ0FBQTtRQUNE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QUUsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUE7UUFDeEMsQ0FBQyxDQUFDLENBQUE7UUFDRixJQUFJLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUE7SUFDaEMsQ0FBQztDQUtGO0FBM0dELHNDQTJHQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvc2l0ZURpc3Bvc2FibGUgfSBmcm9tICdhdG9tJ1xuaW1wb3J0ICogYXMgZXRjaCBmcm9tICdldGNoJ1xuaW1wb3J0IHsgaGwsIG9wZW5XZWIgfSBmcm9tICcuL3V0aWwnXG5cbmV4cG9ydCBpbnRlcmZhY2UgSVByb3BzIGV4dGVuZHMgSlNYLlByb3BzIHtcbiAgc3ltYm9sPzogSVN5bWJvbFxufVxuXG50eXBlIEVsZW1lbnRDbGFzcyA9IEpTWC5FbGVtZW50Q2xhc3NcblxuZXhwb3J0IGNsYXNzIEhvb2dsZURvY1ZpZXcgaW1wbGVtZW50cyBFbGVtZW50Q2xhc3Mge1xuICBwdWJsaWMgZGlzcG9zYWJsZXMgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpXG4gIHByaXZhdGUgc3R5bGU6IHtcbiAgICBmb250U2l6ZT86IHN0cmluZ1xuICAgIGZvbnRGYW1pbHk/OiBzdHJpbmdcbiAgfSA9IHt9XG4gIHByaXZhdGUgcGFyc2VkRG9jOiBzdHJpbmcgPSAnJ1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcHJvcHM6IElQcm9wcyA9IHt9KSB7XG4gICAgdGhpcy51cGRhdGVEb2MocHJvcHMuc3ltYm9sICYmIHByb3BzLnN5bWJvbC5kb2MpXG4gICAgdGhpcy5kaXNwb3NhYmxlcy5hZGQoXG4gICAgICBhdG9tLmNvbmZpZy5vYnNlcnZlKCdlZGl0b3IuZm9udFNpemUnLCAoZm9udFNpemU6IG51bWJlcikgPT4ge1xuICAgICAgICBpZiAoZm9udFNpemUpIHtcbiAgICAgICAgICB0aGlzLnN0eWxlLmZvbnRTaXplID0gYCR7Zm9udFNpemV9cHhgXG4gICAgICAgIH1cbiAgICAgIH0pLFxuICAgICAgYXRvbS5jb25maWcub2JzZXJ2ZSgnZWRpdG9yLmZvbnRGYW1pbHknLCAoZm9udEZhbWlseTogc3RyaW5nKSA9PiB7XG4gICAgICAgIGlmIChmb250RmFtaWx5KSB7XG4gICAgICAgICAgdGhpcy5zdHlsZS5mb250RmFtaWx5ID0gZm9udEZhbWlseVxuICAgICAgICB9XG4gICAgICB9KSxcbiAgICApXG4gICAgZXRjaC5pbml0aWFsaXplKHRoaXMpXG4gIH1cblxuICBwdWJsaWMgcmVuZGVyKCkge1xuICAgIGNvbnN0IGhyZWZCdG5zOiBKU1guRWxlbWVudFtdID0gW11cbiAgICBpZiAodGhpcy5wcm9wcy5zeW1ib2wgJiYgdGhpcy5wcm9wcy5zeW1ib2wuaHJlZikge1xuICAgICAgaHJlZkJ0bnMucHVzaChcbiAgICAgICAgPGEgY2xhc3M9XCJidG4gYnRuLWRlZmF1bHRcIiBvbj17eyBjbGljazogdGhpcy5vcGVuV2ViRG9jIH19PlxuICAgICAgICAgIE9wZW4gd2ViIGRvY3VtZW50YXRpb25cbiAgICAgICAgPC9hPixcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBqc3gtd3JhcC1tdWx0aWxpbmVcbiAgICAgICAgPGEgY2xhc3M9XCJidG4gYnRuLWRlZmF1bHRcIiBocmVmPXt0aGlzLnByb3BzLnN5bWJvbC5ocmVmfT5cbiAgICAgICAgICBPcGVuIHdlYiBkb2N1bWVudGF0aW9uIGluIGJyb3dzZXJcbiAgICAgICAgPC9hPixcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3M9XCJpZGUtaGFza2VsbC1ob29nbGVcIj5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIHN0eWxlPXt0aGlzLnN0eWxlfVxuICAgICAgICAgIGlubmVySFRNTD17aGwoXG4gICAgICAgICAgICAodGhpcy5wcm9wcy5zeW1ib2wgJiYgdGhpcy5wcm9wcy5zeW1ib2wuc2lnbmF0dXJlKSB8fCAnJyxcbiAgICAgICAgICApfVxuICAgICAgICAvPlxuICAgICAgICA8ZGl2PntocmVmQnRuc308L2Rpdj5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNsYXNzPVwiaWRlLWhhc2tlbGwtaG9vZ2xlLW91dHB1dCBlZGl0b3IgZWRpdG9yLWNvbG9ycyBuYXRpdmUta2V5LWJpbmRpbmdzXCJcbiAgICAgICAgICBzdHlsZT17dGhpcy5zdHlsZX1cbiAgICAgICAgICB0YWJJbmRleD1cIi0xXCJcbiAgICAgICAgICBpbm5lckhUTUw9e3RoaXMucGFyc2VkRG9jfVxuICAgICAgICAvPlxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG5cbiAgcHVibGljIGFzeW5jIHVwZGF0ZShwcm9wczogSVByb3BzKSB7XG4gICAgaWYgKFxuICAgICAgKHRoaXMucHJvcHMuc3ltYm9sICYmIHRoaXMucHJvcHMuc3ltYm9sLmRvYykgIT09XG4gICAgICAocHJvcHMuc3ltYm9sICYmIHByb3BzLnN5bWJvbC5kb2MpXG4gICAgKSB7XG4gICAgICB0aGlzLnVwZGF0ZURvYyhwcm9wcy5zeW1ib2wgJiYgcHJvcHMuc3ltYm9sLmRvYylcbiAgICB9XG4gICAgdGhpcy5wcm9wcyA9IHByb3BzXG4gICAgcmV0dXJuIGV0Y2gudXBkYXRlKHRoaXMpXG4gIH1cblxuICBwdWJsaWMgZ2V0VVJJKCkge1xuICAgIHJldHVybiAnaWRlLWhhc2tlbGw6Ly9ob29nbGUvZG9jLydcbiAgfVxuXG4gIHB1YmxpYyBnZXRUaXRsZSgpIHtcbiAgICByZXR1cm4gJ0hvb2dsZSBkb2MnXG4gIH1cblxuICBwdWJsaWMgZGVzdHJveSgpIHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tZmxvYXRpbmctcHJvbWlzZXNcbiAgICBldGNoLmRlc3Ryb3kodGhpcylcbiAgICB0aGlzLmRpc3Bvc2FibGVzLmRpc3Bvc2UoKVxuICB9XG5cbiAgcHVibGljIHNlcmlhbGl6ZSgpOiBJUHJvcHMgJiB7IGRlc2VyaWFsaXplcjogc3RyaW5nIH0ge1xuICAgIHJldHVybiB7XG4gICAgICAuLi50aGlzLnByb3BzLFxuICAgICAgZGVzZXJpYWxpemVyOiAnSG9vZ2xlRG9jVmlldycsXG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVEb2MoZG9jOiBzdHJpbmcgfCB1bmRlZmluZWQpIHtcbiAgICBpZiAoIWRvYykge1xuICAgICAgdGhpcy5wYXJzZWREb2MgPSAnTm8gZG9jdW1lbnRhdGlvbidcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIGRpdi5pbm5lckhUTUwgPSBkb2NcbiAgICBkaXYucXVlcnlTZWxlY3RvckFsbCgncHJlJykuZm9yRWFjaCgoZWwpID0+IHtcbiAgICAgIGVsLmlubmVySFRNTCA9IGhsKGVsLmlubmVyVGV4dClcbiAgICB9KVxuICAgIGRpdi5xdWVyeVNlbGVjdG9yQWxsKCdhJykuZm9yRWFjaCgoZWwpID0+IHtcbiAgICAgIGVsLm91dGVySFRNTCA9IGhsKGVsLmlubmVyVGV4dC50cmltKCkpXG4gICAgfSlcbiAgICB0aGlzLnBhcnNlZERvYyA9IGRpdi5pbm5lckhUTUxcbiAgfVxuXG4gIHByaXZhdGUgb3BlbldlYkRvYyA9ICgpID0+IHtcbiAgICB0aGlzLnByb3BzLnN5bWJvbCAmJiBvcGVuV2ViKHRoaXMucHJvcHMuc3ltYm9sLCBmYWxzZSlcbiAgfVxufVxuIl19