"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HoogleDocView = void 0;
const atom_1 = require("atom");
const etch = require("etch");
const util_1 = require("./util");
class HoogleDocView {
    constructor(props = {}) {
        this.props = props;
        this.disposables = new atom_1.CompositeDisposable();
        this.style = {};
        this.parsedDoc = '';
        this.openWebDoc = () => {
            this.props.symbol && util_1.openWeb(this.props.symbol, false);
        };
        this.updateDoc(props.symbol && props.symbol.doc);
        this.disposables.add(atom.config.observe('editor.fontSize', (fontSize) => {
            if (fontSize) {
                this.style.fontSize = `${fontSize}px`;
            }
        }), atom.config.observe('editor.fontFamily', (fontFamily) => {
            if (fontFamily) {
                this.style.fontFamily = fontFamily;
            }
        }));
        etch.initialize(this);
    }
    render() {
        const hrefBtns = [];
        if (this.props.symbol && this.props.symbol.href) {
            hrefBtns.push(etch.dom("a", { class: "btn btn-default", on: { click: this.openWebDoc } }, "Open web documentation"), etch.dom("a", { class: "btn btn-default", href: this.props.symbol.href }, "Open web documentation in browser"));
        }
        return (etch.dom("div", { class: "ide-haskell-hoogle" },
            etch.dom("div", { style: this.style, className: "ide-haskell-hoogle-doc-header", innerHTML: util_1.hl((this.props.symbol && this.props.symbol.signature) || '') }),
            etch.dom("div", { className: "btn-group" }, hrefBtns),
            etch.dom("div", { class: "ide-haskell-hoogle-output editor editor-colors native-key-bindings", style: this.style, tabIndex: "-1", innerHTML: this.parsedDoc })));
    }
    async update(props) {
        if ((this.props.symbol && this.props.symbol.doc) !==
            (props.symbol && props.symbol.doc)) {
            this.updateDoc(props.symbol && props.symbol.doc);
        }
        this.props = props;
        return etch.update(this);
    }
    getURI() {
        return 'ide-haskell://hoogle/doc/';
    }
    getTitle() {
        return 'Hoogle doc';
    }
    destroy() {
        etch.destroy(this);
        this.disposables.dispose();
    }
    serialize() {
        return Object.assign(Object.assign({}, this.props), { deserializer: 'HoogleDocView' });
    }
    updateDoc(doc) {
        if (!doc) {
            this.parsedDoc = 'No documentation';
            return;
        }
        const div = document.createElement('div');
        div.innerHTML = doc;
        div.querySelectorAll('pre').forEach((el) => {
            el.innerHTML = util_1.hl(el.innerText);
        });
        div.querySelectorAll('a').forEach((el) => {
            el.outerHTML = util_1.hl(el.innerText.trim());
        });
        this.parsedDoc = div.innerHTML;
    }
}
exports.HoogleDocView = HoogleDocView;
//# sourceMappingURL=data:application/json;base64,