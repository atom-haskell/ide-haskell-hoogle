"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
var config_1 = require("./config");
exports.config = config_1.config;
const disposables = new atom_1.CompositeDisposable();
let hoogle;
function activate(state) {
    const disp = atom.packages.onDidTriggerActivationHook('language-haskell:grammar-used', () => {
        disp.dispose();
        reallyActivate(state)
            .catch((e) => atom.notifications.addFatalError('Failed to activate ide-haskell-hoogle', {
            stack: e.stack,
            dismissable: true,
            detail: e,
        }));
    });
}
exports.activate = activate;
function createDocView(props = {}) {
    const { HoogleDocView } = require('./hoogle-doc-view');
    return new HoogleDocView(props);
}
exports.createDocView = createDocView;
function createWebView(props = {}) {
    const { HoogleWebView } = require('./hoogle-web-view');
    return new HoogleWebView(props);
}
exports.createWebView = createWebView;
async function showDoc(ed, func) {
    const token = ed.tokenForBufferPosition(ed.getLastCursor().getBufferPosition());
    const { selectListView } = await Promise.resolve().then(() => require('./list-view'));
    if (token) {
        const symbol = token.value;
        const symbols = await hoogle.searchForSymbol(symbol);
        const item = await selectListView(symbols);
        if (item) {
            func(item);
        }
    }
}
async function reallyActivate(_state) {
    if (hoogle) {
        return;
    }
    const { Hoogle } = await Promise.resolve().then(() => require('./hoogle'));
    const { openDoc, openWeb } = await Promise.resolve().then(() => require('./util'));
    hoogle = new Hoogle();
    disposables.add(hoogle);
    disposables.add(atom.workspace.addOpener((uriToOpen) => {
        const m = uriToOpen.match(/^ide-haskell:\/\/hoogle\/(doc|web)\/(.*)$/);
        if (!(m && m[1])) {
            return undefined;
        }
        switch (m[1]) {
            case 'doc':
                return createDocView();
            case 'web':
                return createWebView();
        }
        return undefined;
    }));
    disposables.add(atom.commands.add('webview.ide-haskell-hoogle-web', {
        'ide-haskell-hoogle:web-go-back': (ev) => ev.currentTarget.goBack(),
        'ide-haskell-hoogle:web-go-forward': (ev) => ev.currentTarget.goForward(),
    }), atom.commands.add('atom-text-editor', {
        'ide-haskell-hoogle:show-doc-for-symbol': async ({ currentTarget }) => showDoc(currentTarget.getModel(), openDoc),
        'ide-haskell-hoogle:show-web-doc-for-symbol': async ({ currentTarget }) => showDoc(currentTarget.getModel(), openWeb),
    }));
}
function deactivate() {
    disposables.dispose();
}
exports.deactivate = deactivate;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWRlLWhhc2tlbGwtaG9vZ2xlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2lkZS1oYXNrZWxsLWhvb2dsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtCQUF5RTtBQUl6RSxtQ0FBaUM7QUFBeEIsMEJBQUEsTUFBTSxDQUFBO0FBRWYsTUFBTSxXQUFXLEdBQUcsSUFBSSwwQkFBbUIsRUFBRSxDQUFBO0FBQzdDLElBQUksTUFBZSxDQUFBO0FBRW5CLGtCQUF5QixLQUFZO0lBQ25DLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsMEJBQTBCLENBQ25ELCtCQUErQixFQUMvQixHQUFHLEVBQUU7UUFDSCxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUE7UUFDZCxjQUFjLENBQUMsS0FBSyxDQUFDO2FBQ3BCLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQzVDLHVDQUF1QyxFQUFFO1lBQ3ZDLEtBQUssRUFBRyxDQUFXLENBQUMsS0FBSztZQUN6QixXQUFXLEVBQUUsSUFBSTtZQUNqQixNQUFNLEVBQUUsQ0FBQztTQUNWLENBQ0YsQ0FBQyxDQUFBO0lBQ0osQ0FBQyxDQUNGLENBQUE7QUFDSCxDQUFDO0FBZkQsNEJBZUM7QUFFRCx1QkFBOEIsUUFBa0IsRUFBRTtJQUVoRCxNQUFNLEVBQUUsYUFBYSxFQUFFLEdBQTJDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFBO0lBQzlGLE1BQU0sQ0FBQyxJQUFJLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUNqQyxDQUFDO0FBSkQsc0NBSUM7QUFFRCx1QkFBOEIsUUFBa0IsRUFBRTtJQUVoRCxNQUFNLEVBQUUsYUFBYSxFQUFFLEdBQTJDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFBO0lBQzlGLE1BQU0sQ0FBQyxJQUFJLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUNqQyxDQUFDO0FBSkQsc0NBSUM7QUFFRCxLQUFLLGtCQUFrQixFQUFjLEVBQUUsSUFBNEI7SUFDakUsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLHNCQUFzQixDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUE7SUFDL0UsTUFBTSxFQUFFLGNBQWMsRUFBRSxHQUFHLDJDQUFhLGFBQWEsRUFBQyxDQUFBO0lBQ3RELEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDVixNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFBO1FBQzFCLE1BQU0sT0FBTyxHQUFHLE1BQU0sTUFBTSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUNwRCxNQUFNLElBQUksR0FBRyxNQUFNLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUMxQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ1QsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQ1osQ0FBQztJQUNILENBQUM7QUFDSCxDQUFDO0FBRUQsS0FBSyx5QkFBeUIsTUFBYTtJQUN6QyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQUMsTUFBTSxDQUFBO0lBQUMsQ0FBQztJQUN0QixNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsMkNBQWEsVUFBVSxFQUFDLENBQUE7SUFDM0MsTUFBTSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsR0FBRywyQ0FBYSxRQUFRLEVBQUMsQ0FBQTtJQUNuRCxNQUFNLEdBQUcsSUFBSSxNQUFNLEVBQUUsQ0FBQTtJQUNyQixXQUFXLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBRXZCLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxTQUFpQixFQUFFLEVBQUU7UUFDN0QsTUFBTSxDQUFDLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQywyQ0FBMkMsQ0FBQyxDQUFBO1FBQ3RFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2pCLE1BQU0sQ0FBQyxTQUFTLENBQUE7UUFDbEIsQ0FBQztRQUNELE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDYixLQUFLLEtBQUs7Z0JBQ1IsTUFBTSxDQUFDLGFBQWEsRUFBRSxDQUFBO1lBQ3hCLEtBQUssS0FBSztnQkFDUixNQUFNLENBQUMsYUFBYSxFQUFFLENBQUE7UUFDMUIsQ0FBQztRQUNELE1BQU0sQ0FBQyxTQUFTLENBQUE7SUFDbEIsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUVILFdBQVcsQ0FBQyxHQUFHLENBQ2IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsZ0NBQWdDLEVBQUU7UUFDbEQsZ0NBQWdDLEVBQ2hDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FDSixFQUFFLENBQUMsYUFBeUMsQ0FBQyxNQUFNLEVBQUU7UUFDeEQsbUNBQW1DLEVBQ25DLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FDSixFQUFFLENBQUMsYUFBeUMsQ0FBQyxTQUFTLEVBQUU7S0FDNUQsQ0FBQyxFQUNGLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFO1FBQ3BDLHdDQUF3QyxFQUN0QyxLQUFLLEVBQUUsRUFBRSxhQUFhLEVBQUUsRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFFLGFBQW1DLENBQUMsUUFBUSxFQUFFLEVBQUUsT0FBTyxDQUFDO1FBQ2hHLDRDQUE0QyxFQUMxQyxLQUFLLEVBQUUsRUFBRSxhQUFhLEVBQUUsRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFFLGFBQW1DLENBQUMsUUFBUSxFQUFFLEVBQUUsT0FBTyxDQUFDO0tBQ2pHLENBQUMsQ0FDSCxDQUFBO0FBQ0gsQ0FBQztBQUVEO0lBQ0UsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFBO0FBQ3ZCLENBQUM7QUFGRCxnQ0FFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRleHRFZGl0b3IsIFRleHRFZGl0b3JFbGVtZW50LCBDb21wb3NpdGVEaXNwb3NhYmxlIH0gZnJvbSAnYXRvbSdcbmltcG9ydCB7IEhvb2dsZURvY1ZpZXcgYXMgSG9vZ2xlRG9jVmlld1QsIElQcm9wcyBhcyBEb2NQcm9wcyB9IGZyb20gJy4vaG9vZ2xlLWRvYy12aWV3J1xuaW1wb3J0IHsgSG9vZ2xlV2ViVmlldyBhcyBIb29nbGVXZWJWaWV3VCwgSVByb3BzIGFzIFdlYlByb3BzIH0gZnJvbSAnLi9ob29nbGUtd2ViLXZpZXcnXG5pbXBvcnQgeyBIb29nbGUgYXMgSG9vZ2xlVCB9IGZyb20gJy4vaG9vZ2xlJ1xuZXhwb3J0IHsgY29uZmlnIH0gZnJvbSAnLi9jb25maWcnXG5cbmNvbnN0IGRpc3Bvc2FibGVzID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoKVxubGV0IGhvb2dsZTogSG9vZ2xlVFxuXG5leHBvcnQgZnVuY3Rpb24gYWN0aXZhdGUoc3RhdGU6IG5ldmVyKSB7XG4gIGNvbnN0IGRpc3AgPSBhdG9tLnBhY2thZ2VzLm9uRGlkVHJpZ2dlckFjdGl2YXRpb25Ib29rKFxuICAgICdsYW5ndWFnZS1oYXNrZWxsOmdyYW1tYXItdXNlZCcsXG4gICAgKCkgPT4ge1xuICAgICAgZGlzcC5kaXNwb3NlKClcbiAgICAgIHJlYWxseUFjdGl2YXRlKHN0YXRlKVxuICAgICAgLmNhdGNoKChlKSA9PiBhdG9tLm5vdGlmaWNhdGlvbnMuYWRkRmF0YWxFcnJvcihcbiAgICAgICAgJ0ZhaWxlZCB0byBhY3RpdmF0ZSBpZGUtaGFza2VsbC1ob29nbGUnLCB7XG4gICAgICAgICAgc3RhY2s6IChlIGFzIEVycm9yKS5zdGFjayxcbiAgICAgICAgICBkaXNtaXNzYWJsZTogdHJ1ZSxcbiAgICAgICAgICBkZXRhaWw6IGUsXG4gICAgICAgIH0sXG4gICAgICApKVxuICAgIH0sXG4gIClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURvY1ZpZXcocHJvcHM6IERvY1Byb3BzID0ge30pOiBIb29nbGVEb2NWaWV3VCB7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby11bnNhZmUtYW55XG4gIGNvbnN0IHsgSG9vZ2xlRG9jVmlldyB9OiB7SG9vZ2xlRG9jVmlldzogdHlwZW9mIEhvb2dsZURvY1ZpZXdUfSA9IHJlcXVpcmUoJy4vaG9vZ2xlLWRvYy12aWV3JylcbiAgcmV0dXJuIG5ldyBIb29nbGVEb2NWaWV3KHByb3BzKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlV2ViVmlldyhwcm9wczogV2ViUHJvcHMgPSB7fSk6IEhvb2dsZVdlYlZpZXdUIHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXVuc2FmZS1hbnlcbiAgY29uc3QgeyBIb29nbGVXZWJWaWV3IH06IHtIb29nbGVXZWJWaWV3OiB0eXBlb2YgSG9vZ2xlV2ViVmlld1R9ID0gcmVxdWlyZSgnLi9ob29nbGUtd2ViLXZpZXcnKVxuICByZXR1cm4gbmV3IEhvb2dsZVdlYlZpZXcocHJvcHMpXG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNob3dEb2MoZWQ6IFRleHRFZGl0b3IsIGZ1bmM6IChzeW06IElTeW1ib2wpID0+IHZvaWQpIHtcbiAgY29uc3QgdG9rZW4gPSBlZC50b2tlbkZvckJ1ZmZlclBvc2l0aW9uKGVkLmdldExhc3RDdXJzb3IoKS5nZXRCdWZmZXJQb3NpdGlvbigpKVxuICBjb25zdCB7IHNlbGVjdExpc3RWaWV3IH0gPSBhd2FpdCBpbXBvcnQoJy4vbGlzdC12aWV3JylcbiAgaWYgKHRva2VuKSB7XG4gICAgY29uc3Qgc3ltYm9sID0gdG9rZW4udmFsdWVcbiAgICBjb25zdCBzeW1ib2xzID0gYXdhaXQgaG9vZ2xlLnNlYXJjaEZvclN5bWJvbChzeW1ib2wpXG4gICAgY29uc3QgaXRlbSA9IGF3YWl0IHNlbGVjdExpc3RWaWV3KHN5bWJvbHMpXG4gICAgaWYgKGl0ZW0pIHtcbiAgICAgIGZ1bmMoaXRlbSlcbiAgICB9XG4gIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gcmVhbGx5QWN0aXZhdGUoX3N0YXRlOiBuZXZlcikge1xuICBpZiAoaG9vZ2xlKSB7IHJldHVybiB9XG4gIGNvbnN0IHsgSG9vZ2xlIH0gPSBhd2FpdCBpbXBvcnQoJy4vaG9vZ2xlJylcbiAgY29uc3QgeyBvcGVuRG9jLCBvcGVuV2ViIH0gPSBhd2FpdCBpbXBvcnQoJy4vdXRpbCcpXG4gIGhvb2dsZSA9IG5ldyBIb29nbGUoKVxuICBkaXNwb3NhYmxlcy5hZGQoaG9vZ2xlKVxuXG4gIGRpc3Bvc2FibGVzLmFkZChhdG9tLndvcmtzcGFjZS5hZGRPcGVuZXIoKHVyaVRvT3Blbjogc3RyaW5nKSA9PiB7XG4gICAgY29uc3QgbSA9IHVyaVRvT3Blbi5tYXRjaCgvXmlkZS1oYXNrZWxsOlxcL1xcL2hvb2dsZVxcLyhkb2N8d2ViKVxcLyguKikkLylcbiAgICBpZiAoIShtICYmIG1bMV0pKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgfVxuICAgIHN3aXRjaCAobVsxXSkge1xuICAgICAgY2FzZSAnZG9jJzpcbiAgICAgICAgcmV0dXJuIGNyZWF0ZURvY1ZpZXcoKVxuICAgICAgY2FzZSAnd2ViJzpcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVdlYlZpZXcoKVxuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH0pKVxuXG4gIGRpc3Bvc2FibGVzLmFkZChcbiAgICBhdG9tLmNvbW1hbmRzLmFkZCgnd2Vidmlldy5pZGUtaGFza2VsbC1ob29nbGUtd2ViJywge1xuICAgICAgJ2lkZS1oYXNrZWxsLWhvb2dsZTp3ZWItZ28tYmFjayc6XG4gICAgICAoZXYpID0+XG4gICAgICAgIChldi5jdXJyZW50VGFyZ2V0IGFzIEVsZWN0cm9uLldlYlZpZXdFbGVtZW50KS5nb0JhY2soKSxcbiAgICAgICdpZGUtaGFza2VsbC1ob29nbGU6d2ViLWdvLWZvcndhcmQnOlxuICAgICAgKGV2KSA9PlxuICAgICAgICAoZXYuY3VycmVudFRhcmdldCBhcyBFbGVjdHJvbi5XZWJWaWV3RWxlbWVudCkuZ29Gb3J3YXJkKCksXG4gICAgfSksXG4gICAgYXRvbS5jb21tYW5kcy5hZGQoJ2F0b20tdGV4dC1lZGl0b3InLCB7XG4gICAgICAnaWRlLWhhc2tlbGwtaG9vZ2xlOnNob3ctZG9jLWZvci1zeW1ib2wnOlxuICAgICAgICBhc3luYyAoeyBjdXJyZW50VGFyZ2V0IH0pID0+IHNob3dEb2MoKGN1cnJlbnRUYXJnZXQgYXMgVGV4dEVkaXRvckVsZW1lbnQpLmdldE1vZGVsKCksIG9wZW5Eb2MpLFxuICAgICAgJ2lkZS1oYXNrZWxsLWhvb2dsZTpzaG93LXdlYi1kb2MtZm9yLXN5bWJvbCc6XG4gICAgICAgIGFzeW5jICh7IGN1cnJlbnRUYXJnZXQgfSkgPT4gc2hvd0RvYygoY3VycmVudFRhcmdldCBhcyBUZXh0RWRpdG9yRWxlbWVudCkuZ2V0TW9kZWwoKSwgb3BlbldlYiksXG4gICAgfSksXG4gIClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlYWN0aXZhdGUoKSB7XG4gIGRpc3Bvc2FibGVzLmRpc3Bvc2UoKVxufVxuIl19